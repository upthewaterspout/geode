/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
subprojects {
  configurations.all {
    resolutionStrategy {
    //  failOnVersionConflict()

//    exclude module: 'aopalliance'
  //    exclude 'asm'
  //    exclude 'aspectjweaver'
  //    exclude 'cglib'
      

  // Force certain versions of transitive dependencies
  //    force 'asm:asm-all:3.3.1'
  //    force 'asm:asm-all:3.3.1'
    }
  }

  //Task to dump all depencies of all projects, in a way
  //that can be diffed before and after dependency changes
  task dumpDependencies() << {
    description "Dump all of the dependencies as a flat, sorted list"

    project.configurations.each{ configuration -> 
      println( project.name + ":" + configuration.name )
      println( '-------------------')
      configuration.resolvedConfiguration.resolvedArtifacts.collect{dep -> dep.file.name}.unique().toSorted().each{dep ->
        println(dep)
      }
      println()
    }
  }

}
